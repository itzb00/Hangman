/**
 * Hangman Game
 * Anthony Morse
 * 2022
 */

import java.util.ArrayList;
import java.util.Scanner;

public class Main {

    ArrayList<String> wrongGuesses;
    String answer;
    int wrongCounter;
    ArrayList<String> blanks;

    public Main() {
        answer = "example";
        wrongCounter = 0;
        wrongGuesses = new ArrayList<>();
        blanks = createBlanks(answer);
    }

    public static void main(String[] args) {
        System.out.println("============================\n" +
                "=== Welcome to Hangman! ====\n" +
                "============================");

        Main object = new Main();
        while (true) {
            object.styling();
            object.checkGuess();
            System.out.println(object.currentDrawing(object.wrongCounter));
            System.out.println("Wrong guesses so far: " + object.wrongGuesses);
            //user loses
            if (object.wrongCounter >= 7) {
                System.out.println("You have lost!");
                //System.out.println("The word was: " + object.answer);
                break;
            }
            //user wins
            if (!object.blanks.contains("_")) {
                System.out.println("You have won!");
                //System.out.println("The word was: " + object.answer);
                break;
            }
        }
    }


    //play again feature
    /**
    public void playAgain() {
        System.out.println("The word was: " + object.answer);
        Scanner input = new Scanner(System.in);
        System.out.println("Do you want to play again? : (y/n)");
        String decision = input.next();
        if (decision == "y") {
            System.out.println("Enter the new word (dont peek!) :");
            String newWord = input.next();
            answer = newWord;
        }
        return;
    }
     **/


    //creating blank spaces
    public ArrayList<String> createBlanks(String word) {
        ArrayList<String> blanks = new ArrayList<>();
        for (int i = 0; i < word.length(); i++) {
            blanks.add("_");
        }
        return blanks;
    }

    public void styling () {
        System.out.print("[");
        for (String s : blanks) {
            System.out.print(" " + s + " ");
        }
        System.out.print("]");
        System.out.println();
    }

    public void checkGuess () {
        Scanner input = new Scanner(System.in);
        System.out.println("Guess a letter: ");
        String guess = input.next();
        if (guess.length() == 1) {
            if (answer.contains(guess)) {
                revealLetter(guess);
            } else {
                wrongCounter++;
                if (!wrongGuesses.contains(guess))
                wrongGuesses.add(guess);
            }
        }
        else {
            System.out.println("Invalid input. Please enter one letter.");
        }

    }

    public void revealLetter (String guess) {
        for (int i = 0; i < answer.length(); i++) {
            if (answer.substring(i,i+1).equals(guess)) {
                //REVIEW THIS LINE
                blanks.set(i,guess);
            }
        }
    }


    //displaying images
    public String currentDrawing(int wrongCounter) {
        switch(wrongCounter) {
            case 0:
                return (" +---+\n" +
                        "     |\n" +
                        "     |\n" +
                        "     |\n" +
                        "    ===");
            case 1:
                return (" +---+\n" +
                        " O   |\n" +
                        "     |\n" +
                        "     |\n" +
                        "    ===");
            case 2:
                return (" +---+\n" +
                        " O   |\n" +
                        " |   |\n" +
                        "     |\n" +
                        "    ===");
            case 3:
                return (" +---+\n" +
                        " O   |\n" +
                        " |   |\n" +
                        " |   |\n" +
                        "    ===");
            case 4:
                return (" +---+\n" +
                        " O   |\n" +
                        "-|   |\n" +
                        " |   |\n" +
                        "    ===");
            case 5:
                return (" +---+\n" +
                        " O   |\n" +
                        "-|-  |\n" +
                        " |   |\n" +
                        "    ===");
            case 6:
                return (" +---+\n" +
                        " O   |\n" +
                        "-|-  |\n" +
                        " |   |\n" +
                        "/   ===");
            case 7:
                return (" +---+\n" +
                        " O   |\n" +
                        "-|-  |\n" +
                        " |   |\n" +
                        "/ \\ ===");
        }
        return "error";
    }
}
